[Hardware]
sensor = mlx90640 # Sensor to use. Available are: "mlx90640", "lepton35"

[Accuracy]
emissivity = 0.95

[Buzzer]
enable = False
pin = 13 # Pin of buzzer (BCM numbering)

[View]
interpolation = gaussian # https://matplotlib.org/stable/_images/sphx_glr_interpolation_methods_001.png
colormap = nipy_spectral # https://matplotlib.org/stable/tutorials/colors/colormaps.html (append "_r" ro get reversed colormap)
limits_enable = False # Set the limits of the frame. Can be used to crop the picture for example.
limits_x = 0, 31 # X only show pixels between the two values on that axis
limits_y = 0, 23 # Y only show pixels between the two values on that axis

[Temperature_Range]
enable = False # Uses the min and max values to map the colorbar to the temperatures. Temperatures that exceed the range will be clipped off.
min = -40 # Minimum temperature in °C
max = 300 # Maximum temperature in °C
auto_adjust_tempbar = False #If lower or upper temp doesn't need to be clipped, colorbar only goes to the bound of measured temp.


[Monitor]
enable = False # Monitor pixels, if they are in tolerance. If not, turn screen red.
invert = True # Invert the test result
buzzer_enable = True # Buzz if monitored pixels are not in temperature tolerance.
pixels_list = [[0, 0, 10, 50], [0, 31, 10, 50], [23, 0, 35, 50], [23, 31, 10, 50], [11, 15, 10, 50]] # [[Y, X, min_°C, max_°C], [...], ...] (Y0, X0 is top left!)
max_deviations = 0 # How many pixels are allowed out of tolerance.

[Trigger_Buttons]
pins = 12 # Pin(s) that trigger a save. If you have more than one pin, they are seperated with a comma followed by a space (like this: "pins = 12, 26").

[Trigger_Visual]
enable = False # A picture will be taken if all pixels of 'pixel_list' are in tolerance.
invert = True # Invert the test-result
previous_frame = 0 # If a picture is automatically taken, store a past frame. For the current frame, set to '0', for 2 in the past '2'.
pixels_list = [[0, 0, 35, 50], [0, 31, 35, 50], [23, 0, 35, 50], [23, 31, 25, 50], [11, 15, 25, 50], [6, 8, 25, 50], [6, 22, 25, 50], [17, 8, 25, 50], [17, 22, 25, 50], [23, 11, -40, 50], [16, 1, -40, 50]] # [[Y, X, min_°C, max_°C], [...], ...] (Y0, X0 is top left!)
max_deviations = 2 # How many pixels are allowed out of tolerance.

[Trigger_Periodic]
enable = False # Take pictures in a time interval
interval = 60 # Seconds between saves

[Save]
path = /home/pi/thcam/saves # Path to save folder. The path must not end with a "/"!
format = png # Save format (ps, eps, pdf, pgf, png, raw, rgba, svg, svgz, jpg, jpeg, tif, tiff)
prefix = THC_ # What goes before the datetime in the filename
suffix = # What goes after the datetime in the filename
buzzer = True # Buzz if a picture gets taken

[Feed]
enable = True # Copy the newest pictures to a seperate directory and rename/move them to be in order('0' is the newest). These pictures can then be displayed on a html page for example.
path = /home/pi/thcam/.feed # Path to feed folder. The path must not end with a "/"!
length = 9 # How many pictures to keep. Older ones get deleted.
